
//-------------------------------------------------------------------------------------
//-------------------------------------- VIDEO ----------------------------------------
//-------------------------------------------------------------------------------------

#codes to reduce videos and concatenate

#Reduce video size
#docker run -v /home/mario/Desktop/marioguzmanweb/lstm/videos/random_narrative_videos/full_color:/vids bennetimo/shrinkwrap     --input-extension mp4 --ffmpeg-opts crf=22,preset=fast /vids

#https://trac.ffmpeg.org/wiki/Concatenate

# with a bash for loop entire folder
#for f in ./*.mp4; do echo "file '$f'" >> mylist.txt; done

#concatenate videos
#ffmpeg -f concat -safe 0 -i mylist.txt -c copy min_full_color.mp4



//-------------------------------------------------------------------------------------
//---------------------------------- OPEN FRAMEWORKS ----------------------------------
//-------------------------------------------------------------------------------------


//-----------------Adding directory of images
//Set up

  ofDirectory dir;
    dir.listDir("Polar bears");
    for (int i = 0; i < dir.size(); i++){

        // creates a temporary image, adding to the vector and then adding.  
        ofImage img; // create a temporary image
        images.push_back(img);  // added to the array
        images.back().load(dir.getPath(i)); // we grab the last element in the array and load the path.
        cout << "loaded " << i << " of " << dir.size() << endl;
        
        ofRectangle targetDim(0,0,640,480);
        ofRectangle imageDim(0,0,images.back().getWidth(),
                             images.back().getHeight());
        
        targetDim.scaleTo(imageDim);
        
        images.back().crop(targetDim.x, targetDim.y, targetDim.width, targetDim.height);
        images.back().resize(640,480);
        
    }

// ----------------- going throught all the images with the mouse
images[ max(mouseX, 0) % images.size()].draw(0,0);


// -----------------average an image

//--> in setup
average.allocate(640,480, OF_IMAGE_COLOR); // allocate the initial dimentions
    
    for (int i = 0; i < 640; i++){
        for (int j = 0; j < 480; j++){

            // average:
            // (1) add all values up
            // we need to sum all values
            float sumRed = 0;
            float sumBlue = 0;
            float sumGreen = 0;

            //wTo do the average we take pixel 0 from all images
            for (int k = 0; k < images.size(); k++){
                ofColor color = images[k].getColor(i,j);
                
                sumRed += color.r;
                sumGreen += color.g;
                 sumBlue += color.b;
            }
            // (2) divide
            sumRed /= (float)images.size();
            sumBlue /= (float)images.size();
            sumGreen /= (float)images.size();

            // We set the pixel
            average.setColor(i,j, ofColor(sumRed, sumGreen, sumBlue));
            
            
        }
    }
    
    average.update(); // when you creating it synthetically, you need to update
    
}

  average.draw(0,0);//add in --> draw



 // -----------------snippet to sort with lambda
    sort(images.begin(), images.end(),
        [](const imageWithData & a, const imageWithData & b) -> bool
    {
        return a.brightness > b.brightness;
    });


//----------------- VIDEO FROM CAMERA

ofVideoGrabber grabber;
